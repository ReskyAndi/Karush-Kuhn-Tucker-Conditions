# -*- coding: utf-8 -*-
"""KKTCondition

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qJTN5LasW6-eNgXjNsyMX1BBVprdX9Y2
"""

import sympy as sp
import numpy as np
result_dict = {}
i = 1
diff_eq_x = {}
diff_eq_y = {}
x, y,z,p,q = sp.symbols('x y z p q')
maxim = eval(input('Enter equation : '))
const_1 = eval(input('Enter Constraint 1 :'))
const_2 = eval(input('Enter Constraint 2: '))

equation = maxim + 1*p*const_1 + 1*q*const_2
print("Equation :", equation)
x_diff = sp.diff(equation,x)
y_diff = sp.diff(equation, y)
print("X derivative : ", x_diff)
print("Y derivative : ", y_diff)

#1st Condition

def coefficients(func, var):
    x, y,z,p,q = sp.symbols('x y z p q')
    expx = sp.sympify(func)
    coef = [expx.coeff(var,i) for i in range(expx.as_poly().degree() + 1)]
    coef_var = coef[1]
    return coef[1]

eq_1p = coefficients(x_diff, p)
print(eq_1p)
eq_1q = coefficients(x_diff, q)
print(eq_1q)
eq_2p = coefficients(y_diff, p)
print(eq_2p)
eq_2q = coefficients(y_diff, q)
print(eq_2q)

from sympy import solve

if eq_1p != eq_2p :
    if eq_1p < eq_2p:
          new_eqa = (eq_2p*x_diff) - y_diff
          sol_eqa = solve(new_eqa, q)
          if eq_1q == eq_2q :
              new_eqb = x_diff - y_diff
              sol_eqb = solve(new_eqb, p)

          elif eq_1q != eq_2q:
              if eq_1q > eq_2q:
                 new_eqb = x_diff - (eq_1q*y_diff)
                 sol_eqb = solve(new_eqb, p)

              elif eq_1q < eq_2q :
                 new_eqb = eq_2q*x_diff - y_diff
                 sol_eqb = solve(new_eqb, p)

    elif eq_1p > eq_2p:
          new_eqa = x_diff - eq_1p*y_diff
          sol_eqa = solve(new_eqa, q)
          if eq_1q == eq_2q :
              new_eqb = x_diff - y_diff
              sol_eqb = solve(new_eqb, p)

          elif eq_1q != eq_1q:
              if eq_1q > eq_2q:
                 new_eqb = x_diff - eq_1q*y_diff
                 sol_eqb = solve(new_eqb, p)

              elif eq_1q < eq_2q :
                 new_eqb = eq_2q*x_diff - y_diff
                 sol_eqb = solve(new_eqb, p)

elif eq_1q != eq_2q:
        if eq_1q < eq_2q:
          new_eqb = (eq_2q*x_diff) - y_diff
          sol_eqb = solve(new_eqb, p)

          if eq_1p == eq_2p :
              new_eqa = x_diff - y_diff
              sol_eqa = solve(new_eqa, q)

          elif eq_1p != eq_2p:
              if eq_1p > eq_2p:
                 new_eqa = x_diff - (eq_1p*y_diff)
                 sol_eqa = solve(new_eqa, q)

              elif eq_1p < eq_2p :
                 new_eqa = eq_2p*x_diff - y_diff
                 sol_eqa = solve(new_eqa, q)


        elif eq_1q > eq_2q:
          new_eqb = x_diff - eq_1q*y_diff
          sol_eqb = solve(new_eqb, p)
          if eq_1p == eq_2p :
              new_eqa = x_diff - y_diff
              sol_eqa = solve(new_eqa, q)

          elif eq_1p != eq_2p:
              if eq_1p > eq_2p:
                 new_eqa = x_diff - eq_1p*y_diff
                 sol_eqa = solve(new_eqa, q)


              elif eq_1p < eq_2p :
                 new_eqa = eq_2p*x_diff - y_diff
                 sol_eqa = solve(new_eqa, q)

else :
        new_eqa = x_diff - y_diff
        sol_eqa = solve(new_eqa, q)
        new_eqb = y_diff - x_diff
        sol_eqb = solve(new_eqb, p)


n_sol_eqa = sol_eqa.pop(0)
n_sol_eqb = sol_eqb.pop(0)

print("lambda 1 :", n_sol_eqa)
print("lambda 2 :", n_sol_eqb)

type(n_sol_eqa)

#2nd Condition

scdcon_1 = n_sol_eqa*const_1
scdcon_2 = n_sol_eqb*const_2
print(scdcon_1)
print(scdcon_2)

#1st Testing Point

diff_jumlah = [n_sol_eqa, n_sol_eqb]
print(diff_jumlah)
variab = sp.symbols('x y')
a,b = sp.linear_eq_to_matrix(diff_jumlah,tuple(variab))
matrix_jumlah_1 = a
matrix_jumlah_2 = b
mat_jum_1 = np.array(matrix_jumlah_1)
mat_jum_2 = np.array(matrix_jumlah_2)
n_mat_jum_2= np.concatenate(mat_jum_2)
print("matrix 1: ", mat_jum_1)
print("matrix 2: ", n_mat_jum_2)

mat_jum_1 = np.float64(mat_jum_1)
n_mat_jum_2 = np.float64(n_mat_jum_2)

val_x, val_y = np.linalg.solve(mat_jum_1, n_mat_jum_2)
print(f"The solution of the system of equations is x = {val_x} and y = {val_y}")

val_lam_1 =  n_sol_eqa.subs({'x' : val_x, 'y' : val_y})
print("Value of Lambda 1 : ",val_lam_1)
val_lam_2 =  n_sol_eqb.subs({'x' : val_x, 'y' : val_y})
print("Value of Lambda 2 : ",val_lam_2)

if val_lam_1 >= 0:
  print("Lambda 1 Satisfied")
else :
  print("Lambda 1 Not Satisfied")

if val_lam_2 >= 0:
  print("Lambda 2 Satisfied")
else :
  print("Lambda 2 Not Satisfied")

val_const_1 =  const_1.subs({'x' : val_x, 'y' : val_y})
print("Value of Constraint 1 : ",round(val_const_1))
val_const_2 =  const_2.subs({'x' : val_x, 'y' : val_y})
print("Value of Constraint 2 : ",round(val_const_2))

if val_const_1 <= 0:
  print("Constraint 1 Satisfied")
else :
  print("Constraint 1 Not Satisfied")

if val_const_2 <= 0:
  print("Constraint 2 Satisfied")
else :
  print("Constraint 2 Not Satisfied")

def TestingPoint(equat_1, equat_2):
  #1st Testing Point
  diff_tot = [equat_1, equat_2]
  print(diff_tot)
  variab = sp.symbols('x y')
  a,b = sp.linear_eq_to_matrix(diff_tot,tuple(variab))
  matrix_jumlah_1 = a
  matrix_jumlah_2 = b
  mat_jum_1 = np.array(matrix_jumlah_1)
  mat_jum_2 = np.array(matrix_jumlah_2)
  n_mat_jum_2= np.concatenate(mat_jum_2)
  print("matrix 1: ", mat_jum_1)
  print("matrix 2: ", n_mat_jum_2)

  mat_jum_1 = np.float64(mat_jum_1)
  n_mat_jum_2 = np.float64(n_mat_jum_2)

  val_x, val_y = np.linalg.solve(mat_jum_1, n_mat_jum_2)
  print(f"The solution of the system of equations is x = {val_x} and y = {val_y}")

  val_lam_1 =  n_sol_eqa.subs({'x' : val_x, 'y' : val_y})
  print("Value of Lambda 1 : ",val_lam_1)
  val_lam_2 =  n_sol_eqb.subs({'x' : val_x, 'y' : val_y})
  print("Value of Lambda 2 : ",val_lam_2)

  state = ["Lambda 1 Satisfied", "Lambda 1 Not Satisfied","Lambda 2 Satisfied", "Lambda 2 Not Satisfied" ]
  state_con = ["Constraint 1 Satisfied", "Constraint 1 Not Satisfied","Constraint 2 Satisfied", "Constraint 2 Not Satisfied" ]
  if val_lam_1 >= 0:
    state1 = state[0]
    print(state1)
  else :
    state1 = state[1]
    print(state1)

  if val_lam_2 >= 0:
    state2 = state[2]
    print(state2)
  else :
    state2 = state[3]
    print(state2)


  val_const_1 =  const_1.subs({'x' : val_x, 'y' : val_y})
  print("Value of Constraint 1 : ",round(val_const_1))
  val_const_2 =  const_2.subs({'x' : val_x, 'y' : val_y})
  print("Value of Constraint 2 : ",round(val_const_2))

  if val_const_1 <= 0:
    state_con1 = state_con[0]
    print(state_con1)
  else :
    state_con1 = state_con[1]
    print(state_con1)

  if val_const_2 <= 0:
    state_con2 = state_con[2]
    print(state_con2)
  else :
    state_con2 = state_con[3]
    print(state_con2)

  if state1 == state[0] and state2 == state[2] and state_con1 == state_con[0] and state_con2 == state_con[2]:
      print("Satisfied")
      val_f = maxim.subs({'x' : val_x, 'y' : val_y})
      print(val_f)
  else :
      print("Not Satisfied")

Test_1 = TestingPoint(n_sol_eqa, n_sol_eqb)

Test_2 = TestingPoint(n_sol_eqb, const_2)

Test_3 = TestingPoint(const_1, const_2)

Test_4 = TestingPoint(const_1, n_sol_eqa)

